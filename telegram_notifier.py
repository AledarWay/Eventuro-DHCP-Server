import requests
import logging
import time
from datetime import datetime, timedelta
import re

class TelegramNotifier:
    def __init__(self, config, db_manager):
        self.bot_token = config['telegram_bot_token']
        self.chat_id = config['telegram_chat_id']
        self.web_url = config['telegram_web_url']
        self.domain_name = config['domain_name']
        self.enabled = config.get('telegram_enabled', True)
        self.notify_new = config.get('telegram_notify_new_device', True)
        self.notify_inactive = config.get('telegram_notify_inactive_device', True)
        self.retries = config.get('telegram_retries', 3)
        self.retry_interval = config.get('telegram_retry_interval', 5)
        self.inactive_period = self.parse_duration(config.get('inactive_period', '7d'))
        self.thread_id = config.get('telegram_thread_id', None)
        self.db_manager = db_manager
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        logging.info("TelegramNotifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å enabled=%s, notify_new=%s, notify_inactive=%s, retries=%s, retry_interval=%s, inactive_period=%s, thread_id=%s",
                     self.enabled, self.notify_new, self.notify_inactive, self.retries, self.retry_interval, self.inactive_period, self.thread_id)
    
    def parse_duration(self, s):
        try:
            num = int(s[:-1])
            unit = s[-1].lower()
            if unit == 'm':
                return timedelta(minutes=num)
            elif unit == 'h':
                return timedelta(hours=num)
            elif unit == 'd':
                return timedelta(days=num)
            elif unit == 'y':
                return timedelta(days=num * 365)
            else:
                raise ValueError
        except Exception:
            logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç inactive_period: %s. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7 –¥–Ω–µ–π.", s)
            return timedelta(days=7)

    def pluralize(self, number, forms):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ –¥–ª—è —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –º–∏–Ω—É—Ç–∞, 2 –º–∏–Ω—É—Ç—ã, 5 –º–∏–Ω—É—Ç)."""
        if number % 10 == 1 and number % 100 != 11:
            return forms[0]  # 1 –º–∏–Ω—É—Ç–∞, 1 —á–∞—Å, 1 –¥–µ–Ω—å
        elif 2 <= number % 10 <= 4 and (number % 100 < 10 or number % 100 >= 20):
            return forms[1]  # 2‚Äì4 –º–∏–Ω—É—Ç—ã, —á–∞—Å–∞, –¥–Ω—è
        else:
            return forms[2]  # 0, 5‚Äì20 –º–∏–Ω—É—Ç, —á–∞—Å–æ–≤, –¥–Ω–µ–π

    def to_human_time(self, delta):
        seconds = delta.total_seconds()
        if seconds < 3600:
            minutes = int(seconds // 60)
            return f"{minutes} {self.pluralize(minutes, ['–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'])}"
        elif seconds < 86400:
            hours = int(seconds // 3600)
            return f"{hours} {self.pluralize(hours, ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'])}"
        else:
            days = int(seconds // 86400)
            return f"{days} {self.pluralize(days, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'])}"

    def escape_markdown(self, text):
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2."""
        if not text:
            return text
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
        markdown_chars = r'([*_`\[\]\(\)~#+\-=|{}\.!])'
        return re.sub(markdown_chars, r'\\\1', str(text))

    def send_message(self, message):
        if not self.enabled:
            logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message) > 4096:
            logging.warning("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (%d —Å–∏–º–≤–æ–ª–æ–≤), —É—Ä–µ–∑–∞–µ—Ç—Å—è –¥–æ 4096", len(message))
            message = message[:4096]
        payload = {
            "chat_id": self.chat_id,
            "text": message,
            "parse_mode": "MarkdownV2",
            "disable_web_page_preview": False
        }
        if self.thread_id is not None:
            payload["message_thread_id"] = self.thread_id
        for attempt in range(self.retries):
            try:
                response = requests.post(f"{self.base_url}/sendMessage", json=payload, timeout=10)
                response.raise_for_status()
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–º—É %s", self.thread_id or "–æ—Å–Ω–æ–≤–Ω–∞—è")
                return True
            except requests.exceptions.RequestException as e:
                logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram %d –Ω–µ —É–¥–∞–ª–∞—Å—å: %s, –æ—Ç–≤–µ—Ç=%s", 
                                attempt + 1, str(e), getattr(response, 'text', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'))
                if attempt < self.retries - 1:
                    logging.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ %d —Å–µ–∫—É–Ω–¥...", self.retry_interval)
                    time.sleep(self.retry_interval)
            except Exception as e:
                logging.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram: %s", str(e))
                break
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", self.retries)
        return False

    def notify(self, mac, ip, hostname, is_new_device, time_diff=None):
        if not self.enabled:
            logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è MAC %s", mac)
            return
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        current_time = self.escape_markdown(datetime.now().strftime("%d.%m.%Y %H:%M:%S"))
        # –î–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
        if not is_new_device and not hostname:
            hostname = self.db_manager.get_hostname(mac)
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        hostname = self.escape_markdown(hostname or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        mac = self.escape_markdown(mac)
        ip = self.escape_markdown(ip)
        domain_name = self.escape_markdown(self.domain_name)
        web_url = self.web_url

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL
        if not web_url.startswith(('http://', 'https://')):
            web_url = f"https://{web_url}"
            logging.warning("URL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: %s", web_url)

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        mac_label = self.escape_markdown("MAC")
        ip_label = self.escape_markdown("–í—ã–¥–∞–Ω IP")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_new_device and self.notify_new:
            message = (
                "üõú –ü–æ–¥–∫–ª—é—á–µ–Ω–æ *–Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ* –∫ —Å–µ—Ç–∏\n"
                f"‚ÑπÔ∏è *–ò–º—è*: {hostname}\n"
                f"üîå *{mac_label}*: {mac}\n"
                f"‚úâÔ∏è *{ip_label}*: {ip}\n"
                f"üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: [–û—Ç–∫—Ä—ã—Ç—å]({web_url})\n"
                f"üïí *–í—Ä–µ–º—è*: {current_time}\n"
            )
            self.send_message(message)
        elif not is_new_device and self.notify_inactive and time_diff:
            human_time = self.escape_markdown(self.to_human_time(time_diff))
            message = (
                "üõú –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å –ø–æ—Å–ª–µ *–¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è*\n"
                f"üóì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: *{human_time} –Ω–∞–∑–∞–¥*\n"
                f"‚ÑπÔ∏è *–ò–º—è*: {hostname}\n"
                f"üîå *{mac_label}*: {mac}\n"
                f"‚úâÔ∏è *{ip_label}*: {ip}\n"
                f"üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: [–û—Ç–∫—Ä—ã—Ç—å]({web_url})\n"
                f"üïí *–í—Ä–µ–º—è*: {current_time}\n"
            )
            self.send_message(message)